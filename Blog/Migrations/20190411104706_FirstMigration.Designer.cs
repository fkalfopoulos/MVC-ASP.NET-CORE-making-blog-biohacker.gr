// <auto-generated />
using System;
using Blog.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Blog.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20190411104706_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Blog.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("StoryId");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Blog.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("StoryId");

                    b.Property<string>("StoryId1");

                    b.Property<string>("Text");

                    b.Property<int>("UserId");

                    b.Property<string>("UserId1");

                    b.HasKey("CommentId");

                    b.HasIndex("StoryId1");

                    b.HasIndex("UserId1");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Blog.Models.Like", b =>
                {
                    b.Property<string>("StoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StoryId1");

                    b.Property<string>("UserId");

                    b.HasKey("StoryId");

                    b.HasIndex("StoryId1");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Blog.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<bool>("IsMain");

                    b.Property<string>("PublicID");

                    b.Property<int>("StoryId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Blog.Models.Story", b =>
                {
                    b.Property<string>("StoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastEditTime");

                    b.Property<string>("OwnerId");

                    b.Property<int>("PhotoId");

                    b.Property<string>("Title");

                    b.HasKey("StoryId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("Blog.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("StoryId");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Blog.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Blog.Models.Category", b =>
                {
                    b.HasOne("Blog.Models.Story")
                        .WithMany("Categories")
                        .HasForeignKey("StoryId");
                });

            modelBuilder.Entity("Blog.Models.Comment", b =>
                {
                    b.HasOne("Blog.Models.Story")
                        .WithMany("Comments")
                        .HasForeignKey("StoryId1");

                    b.HasOne("Blog.Models.User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Blog.Models.Like", b =>
                {
                    b.HasOne("Blog.Models.Story", "Story")
                        .WithMany("Likes")
                        .HasForeignKey("StoryId1");

                    b.HasOne("Blog.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Blog.Models.Story", b =>
                {
                    b.HasOne("Blog.Models.User", "Owner")
                        .WithMany("Stories")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Blog.Models.Photo", "Photo")
                        .WithOne("Story")
                        .HasForeignKey("Blog.Models.Story", "PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blog.Models.Tag", b =>
                {
                    b.HasOne("Blog.Models.Story")
                        .WithMany("Tags")
                        .HasForeignKey("StoryId");
                });
#pragma warning restore 612, 618
        }
    }
}
